@function containsModifier($selector) {
	$selector: selectorToString($selector);
	@if str-index($selector, $modifierSeparator) {
		@return true;
	} @else {
		@return false;
	}
}

@function selectorToString($selector) {
	$selector: inspect($selector); //cast to string
	$selector: str-slice($selector, 2, -2); //remove brackets
	@return $selector;
}

@function getBlock($selector) {
	$selector: selectorToString($selector);
	$modifierStart: str-index($selector, $modifierSeparator) - 1;
	@return str-slice($selector, 0, $modifierStart);
}





@function palette($palette: 'brand', $tone: '500') {
	@return map-get(map-get($palettes, $palette), $tone);
}

@function ff($family: 'body') {
	@return unquote(map-get($fonts,$family));
}


@function first($list) {
  @return nth($list, 1);
}

@function last($list) {
  @return nth($list, length($list));
}


@function lower-bound($range){
	@if length($range) <= 0 {
		@return 0;
	}
	@return nth($range,1);
}

@function upper-bound($range) {
	@if length($range) < 2 {
		@return 9999999;
	}
	@return nth($range, 2);
}



/// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
  @return mix($color, white, $percentage);
}

/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
  @return mix($color, black, $percentage);
}


@function map-set($map, $key, $value) {
  $new: ($key: $value);
  @return map-merge($map, $new);
}

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}


@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overridden with `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}



@function palette($palette: brand, $tone: 500) {
	//@return map-deep-get( $palettes, $palette, $tone );
	@return map-get(map-get($palettes, $palette), $tone);
}




@function generate-tints($color,$color_map) {
	@for $t from 1 through length($tints) {
		$hundreds : nth( $t_keys, $t );
		$percent  : nth( $t_vals, $t );
		$tint: tint( $color, $percent );

		$color_map: map-set( $color_map, $hundreds, $tint );
		//@debug( $color_map );
	}
	@return $color_map;
}

@function generate-shades($color,$color_map) {
	@for $s from 1 through length($shades) {
		$hundreds : nth( $s_keys, $s );
		$percent  : nth( $s_vals, $s );
		$shade: shade( $color, $percent );

		$color_map: map-set( $color_map, $hundreds, $shade );
		//@debug( $color_map );
	}
	@return $color_map;
}

@function generate-color-palette($palettes) {

	@for $i from 1 through length($color_values) {
		$color: nth($color_values, $i);
		$name: nth($color_names, $i);

		$color_map: (
			500: $color
		);

		$color_map: generate-shades($color,$color_map);

		$color_map: generate-tints($color,$color_map);

		$palettes: map-set( $palettes, $name, $color_map );
	}

	//@debug $palettes;
	@return $palettes;
}
