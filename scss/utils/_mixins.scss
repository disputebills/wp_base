
@mixin bp($point) { // = xs, sm, md
  $query: "";
  @if map-has-key($breakpoints, $point) {
	$key: map-get($breakpoints, $point);
	  @if map-has-key($key, min) {
		$query: append($query, "(min-width: #{map-get($key, min)})")
	  }
	  @if map-has-key($key, min) and map-has-key($key, max) {
		$query: append($query, "and")
	  }
	  @if map-has-key($key, max) {
		$query: append($query, "(max-width: #{map-get($key, max)})")
	  }
	  @media screen and #{$query} { @content; }
	}
	@else {
		@content;
	}
}

@mixin mq($point, $IE9: false, $query1: min, $query2: width) {
	@if $IE9 == true{
		.lt-ie9 & {
			@content;
		}
	}

	@media (#{$query1}-#{$query2}: $point) {
		@content;
	}
}


@mixin b($block) {
	.#{$block} {
		@content;
	}
}

@mixin e($element) {
	$selector: '&';
	$block: getBlock($selector);
	@if containsModifier($selector) {
		@at-root {
			#{$selector} {
			  #{$block+$elementSeparator+$element} {
			  	@content;
			  }
			}
		}
	}
	@else {
		@at-root {
			#{$selector+$elementSeparator+$element} {
			  @content;
			}
		}
	}
}

@mixin m($modifier) {
	@at-root {
		#{'&'}#{$modifierSeparator+$modifier} {
			@content;
		}
	}
}


@function palette($palette, $tone: 'base') {
	@return map-get(map-get($palettes, $palette), $tone);
}


@function first($list) {
  @return nth($list, 1);
}

@function last($list) {
  @return nth($list, length($list));
}




@mixin center-align($dir: false) {
	$map: (
		top:  ( Y ),
		left: ( X )
	);

	$val: map_get($map,$dir);

	@if map_get($map, $dir) != null {
		#{$dir}: 50%;
		transform: translate#{$val}(-50%);//#{"translate#{$val}(-50%)"};
	} @else {
		transform: translate(-50%,-50%);
		top: 50%;
		left: 50%;
	}
}


@mixin box($size: 2) {
	width: $size;
	height: $size;
}




//



/* GRID MIXINS */
@mixin calc-grid($index, $class) {

	$width: percentage(($index / $columns));

	.col--#{$class}-#{$index} {
		flex-basis: $width;
		max-width: $width;
		.no-flexbox & {
			width: $width;
		}
	}
	.col-#{$class}-push-#{$index} {
		left: $width;
	}
	.col-#{$class}-pull-#{$index} {
		right: $width;
	}
	.col-#{$class}-offset-#{$index} {
		margin-left: $width;
	}
}

@mixin make-grid($columns, $class) {
	@for $i from 0 through $columns {
		@include calc-grid($i, $class);
	}
}



@mixin btn( $bg: transparent, $color: palette(brand), $hoverbg: inherit, $hovercolor: #fff ) {
	@extend %btn;
	border: 0;
	padding: .75rem 2rem;
	background: $bg;
	color: $color;

	&:hover{
		background: $hoverbg;
		color: $hovercolor;
	}

}

@mixin blendy($img, $color: null, $grad: null, $blend: multiply) {
  $img-path: url('#{$img}');
  @if $grad {
    background: $grad, $img-path;
  } @else {
    background-image: $img-path;
    background-color: $color;
  }
  background-blend-mode: $blend;
}
